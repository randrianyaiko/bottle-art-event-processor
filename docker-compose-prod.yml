version: '3.8'

services:
  kafka:
    image: bitnami/kafka:3.5.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_LOG_DIRS: "/bitnami/kafka/data"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
    volumes:
      - kafka_data:/bitnami/kafka/data
    networks:
      ecommerce_net:
        aliases:
          - kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server=kafka:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis:8.2
    command: redis-server --requirepass ${REDIS_PASSWORD}
    container_name: redis
    restart: unless-stopped
    networks:
      ecommerce_net:
        aliases:
          - redis
    volumes:
      - redis_data:/data
    mem_limit: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "6379:6379"

  consumer:
    image: randriamihamina/n0rsxduhfn8yrh08g5e16wu5sxed13:latest
    command: python app.py
    restart: unless-stopped
    networks:
      ecommerce_net:
        aliases:
          - consumer
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    
volumes:
  kafka_data:
  redis_data:

networks:
  shared-net:
    driver: bridge
  ecommerce_net:
    driver: bridge